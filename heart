import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

df = pd.read_csv('your_dataset.csv')

# Handle missing values
df.dropna(inplace=True)  # Drop rows with missing values

# Check for duplicates
df.drop_duplicates(inplace=True)

# Step 3: Data Transformation
# Feature scaling (optional)
scaler = StandardScaler()
numeric_cols = ['age', 'chol', 'trestbps', 'thalach', 'oldpeak']
df[numeric_cols] = scaler.fit_transform(df[numeric_cols])

# Encode categorical variables (if any)
# Example: One-hot encoding
df = pd.get_dummies(df, columns=['sex', 'cp', 'fbs', 'restecg', 'exang', 'slope', 'ca', 'thal'])

X = df.drop('target', axis=1)
y = df['target']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the model
clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X_train, y_train)

# Make predictions
y_pred = clf.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
  
